import os
import mne
from cargar_datos_raw import diccionario_datos_procesados_por_tipo

ruta_base = "C:/Users/Eloy.GarciaPerez/OneDrive - Universidad de Castilla-La Mancha/Tesis_EEG/proyecto_eeg/EEG_crop"
archivos = diccionario_datos_procesados_por_tipo(ruta_base, "basal")

# PREPROCESADO PARA ANÁLISIS EN POTENCIALES EVOCADOS


def preprocesado_erps(ruta_fif):
    """
    Preprocesado para análisis ERP:
    - Filtrado suave (0.1 - 30 Hz)
    - Re-referenciación promedio
    - (NO epoching aún, se guarda como Raw)
    """
    raw = mne.io.read_raw_fif(ruta_fif, preload=True)
    raw.filter(0.1, 30.0, fir_design='firwin')
    raw.set_eeg_reference('average', projection=False)
    return raw


# PREPROCESADO PARA ANÁLISIS EN BANDAS DE FRECUENCIA


ruta_base_crop = "C:/Users/Eloy/.../EEG_crop"
ruta_base_guardado = "C:/Users/Eloy/.../EEG_PROCESSED_BANDAS"


def preprocesado_bandas(ruta_fif, ruta_base_crop, ruta_base_guardado):
    """
    Preprocesado para análisis de bandas de frecuencia:
    - Filtrado 1-40 Hz
    - Detección de artefactos musculares
    - Interpolación de canales malos
    - Proyecciones SSP
    - Referencia promedio
    - Guardado en ruta estructurada dentro de EEG_PROCESSED_BANDAS
    """
    print(f"Procesando: {ruta_fif}")
    raw = mne.io.read_raw_fif(ruta_fif, preload=True)

    # 1. Filtrado
    raw.filter(l_freq=1.0, h_freq=40.0)

    # 2. Detección automática de artefactos musculares
    anotaciones, _ = mne.preprocessing.annotate_muscle_zscore(raw, ch_type="eeg")
    raw.set_annotations(anotaciones)
    raw = raw.copy().annotate_bad_segments()

    # 3. Interpolación de canales marcados como malos
    raw.interpolate_bads(reset_bads=True)

    # 4. Proyecciones SSP (1 componente EEG)
    projs, _ = mne.preprocessing.compute_proj_raw(raw, n_grad=0, n_mag=0, n_eeg=1)
    raw.add_proj(projs)
    raw.apply_proj()

    # 5. Referencia promedio
    raw.set_eeg_reference('average', projection=False)

    # 6. Guardado en estructura replicada
    ruta_relativa = os.path.relpath(ruta_fif, ruta_base_crop)
    ruta_guardado = os.path.join(ruta_base_guardado, ruta_relativa)
    os.makedirs(os.path.dirname(ruta_guardado), exist_ok=True)
    raw.save(ruta_guardado, overwrite=True)
    print(f"Guardado en: {ruta_guardado}")


for root, _, files in os.walk(ruta_base_crop):
    for file in files:
        if file.endswith(".fif"):
            ruta_fif = os.path.join(root, file)
            preprocesado_bandas(ruta_fif, ruta_base_crop, ruta_base_guardado)



# PREPROCESADO PARA ANÁLISIS DE CONECTIVIDAD

def preprocesado_conectividad(ruta_fif):
    """
    Preprocesado para análisis de conectividad:
    - Filtrado amplio (1 - 40 Hz)
    - Re-referenciación promedio
    - Eliminación de proyecciones si las hay
    """
    raw = mne.io.read_raw_fif(ruta_fif, preload=True)
    raw.filter(1.0, 40.0, fir_design='firwin')



    return raw

